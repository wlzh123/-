#include<iostream>
#include<algorithm>
#include<vector>
#include<functional>
#include<iterator>
#include<string>
using namespace std;

template <class T>
struct display{
    void operator()(const T& x)const
    {
        cout<<x<<' ';
    }
};

int main(){
    int ia[9]={0,1,2,3,4,5,6,7,8};
    vector<int> iv1(ia,ia+5);
    vector<int> iv2(ia,ia+9);
    ////判断两个区间的第一个不匹配点
    cout<< *(mismatch(iv1.begin(),iv1.end(),iv2.begin()).first);//????
    cout<<endl;
    cout<< *(mismatch(iv1.begin(),iv1.end(),iv2.begin()).second);//5
    cout<<endl;

    cout<<equal(iv1.begin(),iv1.end(),iv2.begin());
    cout<<endl;

    cout<<equal(iv1.begin(),iv1.end(),&iv2[3]);//{0,1,2,3,4}!={3,4,5,6,7}
    cout<<endl;

    cout<<equal(iv1.begin(),iv1.end(),&iv2[3],less<int>());//{0,1,2,3,4}<{3,4,5,6,7}
    cout<<endl;

    fill(iv1.begin(),iv1.end(),9);
    for_each(iv1.begin(),iv1.end(),display<int>());
    cout<<endl;

    fill_n(iv1.begin(),3,7);//从迭代器位置开始填3个7
    for_each(iv1.begin(),iv1.end(),display<int>());
    cout<<endl;

    vector<int>::iterator ite1 =iv1.begin();
    vector<int>::iterator ite2 =ite1;
    advance(ite2,3);
    iter_swap(ite1,ite2);//将迭代器所指的两个元素对调
    cout<<*ite1<<' '<<*ite2<<endl;
    for_each(iv1.begin(),iv1.end(),display<int>());
    cout<<endl;

    cout<<max(*ite1,*ite2)<<endl;//9
    cout<<min(*ite1,*ite2)<<endl;//7

    cout<<*max(ite1,ite2)<<endl;//7
    cout<<*min(ite1,ite2)<<endl;//9


    //此刻的状态iv1:9,7,7,7,9}. iv2:{0,1,2,3,4,5,6,7,8}
    swap(*iv1.begin(),*iv2.begin());//注意与iter_swap()的区别
    for_each(iv1.begin(),iv1.end(),display<int>());cout<<endl;
    for_each(iv2.begin(),iv2.end(),display<int>());
    cout<<endl;

    string stra1[]={"ss1","ss2","ss3"};
    string stra2[]={"ss4","ss5","ss6"};
    cout<<lexicographical_compare(stra1,stra1+2,stra2,stra2+2);
    cout<<endl;
    cout<<lexicographical_compare(stra1,stra1+2,stra2,stra2+2,greater<string>());
    return 0;


}
